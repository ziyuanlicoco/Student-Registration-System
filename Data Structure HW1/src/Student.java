
import java.io.*;
import java.util.ArrayList;

public class Student extends User implements forStudent,Serializable {
	 
	private static final long serialVersionUID = 1L;//generated by Eclipse
	public static ArrayList<Course> allcourses;
	public static ArrayList<Student> studnts = new ArrayList<>();;
	

	protected String studentID;
	
	public Student() {
		super();
	}
	
	public Student(String username, String password, String firstName, String lastName, String studentID ) {
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName; 
		this.studentID = studentID;
	}//constructor
	

	public String getStudentID() {
		return studentID;
	}
	
	public void setStudentID(String studentID) {
		this.studentID = studentID;
	}

	@Override
	public void viewAllCourse() {//loop through all courses and print them all out
		for (int i = 0; i< Registration.allcourses.size();i++) {
			System.out.println(Registration.allcourses.get(i));
		}
	
	}

	@Override
	public void viewNotFullCourse() {//loop through all courses not full and print them all out
		for (int i = 0; i< Registration.allcourses.size(); i++) {
			if (Registration.allcourses.get(i).getMaxStu() > Registration.allcourses.get(i).getCurrentStu()) {//current student number less than max 
				System.out.println(Registration.allcourses.get(i));
			}
		}
	}

	@Override
	public void registerCourse(String course, String section, String firstName, String lastName) {
		for (int i = 0; i< Registration.allcourses.size(); i++) {
			if (Registration.allcourses.get(i).getCourseName().equalsIgnoreCase(course) && Registration.allcourses.get(i).getSectionNum().equalsIgnoreCase(section)) {
				if (Registration.allcourses.get(i).getCurrentStu() == Registration.allcourses.get(i).getMaxStu())
					System.out.println("Class full.");//cannot get in full course
				else {
					for (int m = 0; m < Registration.students.size();m++) {
						if (Registration.students.get(m).getFirstName().equalsIgnoreCase(firstName) && Registration.students.get(m).getLastName().equalsIgnoreCase(lastName) ) {
							Registration.allcourses.get(i).getNameList().add(Registration.students.get(m));//add name to the namelist of the course
							Registration.allcourses.get(i).setCurrentStu(Registration.allcourses.get(i).getCurrentStu()+1);//current student number plus 1
							System.out.println("Registered successfully");
						}
					}
				}
			} 
		}

	}

	@Override
	public void withdrawCourse(String course,String firstName, String lastName ){
		
		for (int i = 0; i< Registration.allcourses.size(); i++) {
			if (Registration.allcourses.get(i).getCourseName().equalsIgnoreCase(course)) {
				for (int m = 0; m < Registration.allcourses.get(i).getNameList().size();m++) {
					if (Registration.allcourses.get(i).getNameList().get(m).getFirstName().equalsIgnoreCase(firstName) && Registration.allcourses.get(i).getNameList().get(m).getLastName().equalsIgnoreCase(lastName) ) {
						Registration.allcourses.get(i).getNameList().remove(m);//delete name from the namelist of the course
						Registration.allcourses.get(i).setCurrentStu(Registration.allcourses.get(i).getCurrentStu()-1);//current student number minus 1
						System.out.println("Withdrawed successfully");
					}
				}
			}
		}
	}

	@Override
	public void viewRegisteredCourse(String username) {//see all courses the student registered
		for (int i = 0; i< Registration.allcourses.size(); i++) {
			for (int m = 0; m < Registration.allcourses.get(i).getNameList().size();m++) {
				if (Registration.allcourses.get(i).getNameList().get(m).getUsername().equals(username)) {
					System.out.println(Registration.allcourses.get(i).getCourseName());
				}
			}
		}
		
	}
	
	@Override
	public void menuCM() {
		System.out.println("1. View all courses");
		System.out.println("2. View courses not full");
		System.out.println("3. Register in a course");
		System.out.println("4. Withdraw from a course");
		System.out.println("5. View all registered courses");
		System.out.println("6. Exit");
	}


	
}
